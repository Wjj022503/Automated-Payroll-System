/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package registration.frontend;
import java.rmi.Naming;

import javax.swing.JOptionPane;

/**
 *
 * @author Asus
 */
public class registrationGUI extends javax.swing.JFrame {

    /**
     * Creates new form registrationGUI
     */
    public registrationGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        firstpage = new javax.swing.JPanel();
        employeeregistrationLabelf = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        retypepasswordLabel = new javax.swing.JLabel();
        readusername = new javax.swing.JTextField();
        readretypepassword = new javax.swing.JPasswordField();
        readpassword = new javax.swing.JPasswordField();
        usernameNote = new javax.swing.JLabel();
        passwordNote = new javax.swing.JLabel();
        retypepasswordvisible = new javax.swing.JCheckBox();
        passwordvisible = new javax.swing.JCheckBox();
        nextpagebutton = new javax.swing.JButton();
        retypepasswordNote = new javax.swing.JLabel();
        invalidinputNote = new javax.swing.JLabel();
        backbutton1 = new javax.swing.JButton();
        secondpage = new javax.swing.JPanel();
        departmentLabel = new javax.swing.JLabel();
        icLabel = new javax.swing.JLabel();
        contactnoLabel = new javax.swing.JLabel();
        fullnameLabel = new javax.swing.JLabel();
        employeeregistrationLabels = new javax.swing.JLabel();
        readfullname = new javax.swing.JTextField();
        readIC = new javax.swing.JTextField();
        icNote = new javax.swing.JLabel();
        contactNote = new javax.swing.JLabel();
        readcontactnumber = new javax.swing.JTextField();
        departmentdropdown = new javax.swing.JComboBox<>();
        fullnameNote = new javax.swing.JLabel();
        nextpagebutton2 = new javax.swing.JButton();
        invalidinputNote2 = new javax.swing.JLabel();
        backbutton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(750, 450));
        getContentPane().setLayout(new java.awt.CardLayout());

        firstpage.setPreferredSize(new java.awt.Dimension(750, 450));

        employeeregistrationLabelf.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        employeeregistrationLabelf.setText("Employee Registration ");

        passwordLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        passwordLabel.setText("Password");

        usernameLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        usernameLabel.setText("User Name");

        retypepasswordLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        retypepasswordLabel.setText("Retype Password");

        readusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readusernameActionPerformed(evt);
            }
        });
        readusername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readusernameKeyReleased(evt);
            }
        });

        readretypepassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readretypepasswordActionPerformed(evt);
            }
        });
        readretypepassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readretypepasswordKeyReleased(evt);
            }
        });

        readpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readpasswordActionPerformed(evt);
            }
        });
        readpassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readpasswordKeyReleased(evt);
            }
        });

        usernameNote.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        usernameNote.setPreferredSize(new java.awt.Dimension(64, 22));

        passwordNote.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        retypepasswordvisible.setText("show");
        retypepasswordvisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retypepasswordvisibleActionPerformed(evt);
            }
        });

        passwordvisible.setText("show");
        passwordvisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordvisibleActionPerformed(evt);
            }
        });

        nextpagebutton.setText("Next");
        nextpagebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextpagebuttonMouseClicked(evt);
            }
        });
        nextpagebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextpagebuttonActionPerformed(evt);
            }
        });

        retypepasswordNote.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        backbutton1.setText("Back");
        backbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbutton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout firstpageLayout = new javax.swing.GroupLayout(firstpage);
        firstpage.setLayout(firstpageLayout);
        firstpageLayout.setHorizontalGroup(
            firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstpageLayout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(employeeregistrationLabelf)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstpageLayout.createSequentialGroup()
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(firstpageLayout.createSequentialGroup()
                            .addGap(92, 92, 92)
                            .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameLabel)
                                .addComponent(readusername, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstpageLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(usernameNote, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(firstpageLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(backbutton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(retypepasswordNote, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(retypepasswordLabel)
                        .addComponent(passwordLabel)
                        .addComponent(readretypepassword, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                        .addComponent(readpassword)
                        .addComponent(passwordNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(28, 28, 28)
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstpageLayout.createSequentialGroup()
                        .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(retypepasswordvisible, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordvisible, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstpageLayout.createSequentialGroup()
                        .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invalidinputNote, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextpagebutton))
                        .addContainerGap())))
        );
        firstpageLayout.setVerticalGroup(
            firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstpageLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(employeeregistrationLabelf)
                .addGap(78, 78, 78)
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstpageLayout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readusername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameNote, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstpageLayout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(readpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordvisible))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordNote, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addComponent(retypepasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readretypepassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retypepasswordvisible))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstpageLayout.createSequentialGroup()
                        .addComponent(invalidinputNote, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(firstpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextpagebutton)
                            .addComponent(backbutton1))
                        .addGap(20, 20, 20))
                    .addGroup(firstpageLayout.createSequentialGroup()
                        .addComponent(retypepasswordNote, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        getContentPane().add(firstpage, "registrationfirstpage");

        secondpage.setPreferredSize(new java.awt.Dimension(750, 450));

        departmentLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        departmentLabel.setText("Department ");

        icLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        icLabel.setText("IC ");

        contactnoLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        contactnoLabel.setText("Contact Number ");

        fullnameLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        fullnameLabel.setText("Full Name");

        employeeregistrationLabels.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        employeeregistrationLabels.setText("Employee Registration ");

        readIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readICKeyReleased(evt);
            }
        });

        icNote.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        contactNote.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        readcontactnumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readcontactnumberKeyReleased(evt);
            }
        });

        departmentdropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Finance", "Developer", "Manager", "Infrastructure" }));
        departmentdropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentdropdownActionPerformed(evt);
            }
        });

        nextpagebutton2.setText("Next");
        nextpagebutton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextpagebutton2ActionPerformed(evt);
            }
        });

        backbutton2.setText("Back");
        backbutton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbutton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout secondpageLayout = new javax.swing.GroupLayout(secondpage);
        secondpage.setLayout(secondpageLayout);
        secondpageLayout.setHorizontalGroup(
            secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondpageLayout.createSequentialGroup()
                .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, secondpageLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullnameLabel)
                            .addComponent(icLabel)
                            .addComponent(readfullname, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fullnameNote, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(readIC, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(icNote, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(departmentLabel)
                            .addComponent(contactnoLabel)
                            .addComponent(readcontactnumber)
                            .addComponent(departmentdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactNote, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, secondpageLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(employeeregistrationLabels))
                    .addGroup(secondpageLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(backbutton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(invalidinputNote2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextpagebutton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(17, 17, 17))
        );
        secondpageLayout.setVerticalGroup(
            secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondpageLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(employeeregistrationLabels)
                .addGap(33, 33, 33)
                .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secondpageLayout.createSequentialGroup()
                        .addComponent(fullnameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readfullname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(fullnameNote, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readIC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(secondpageLayout.createSequentialGroup()
                        .addComponent(departmentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(departmentdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contactnoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readcontactnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactNote, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(icNote, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(invalidinputNote2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextpagebutton2)
                    .addComponent(backbutton2))
                .addGap(32, 32, 32))
        );

        getContentPane().add(secondpage, "registrationsecondpage");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readusernameActionPerformed

    private void readretypepasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readretypepasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readretypepasswordActionPerformed

    private void readpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readpasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readpasswordActionPerformed

    private void retypepasswordvisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retypepasswordvisibleActionPerformed
        // TODO add your handling code here:
        if (retypepasswordvisible.isSelected()) {
            readretypepassword.setEchoChar((char) 0); 
        } else {
            readretypepassword.setEchoChar('*'); 
        }
    }//GEN-LAST:event_retypepasswordvisibleActionPerformed

    private void passwordvisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordvisibleActionPerformed
        // TODO add your handling code here:
        if (passwordvisible.isSelected()) {
            readpassword.setEchoChar((char) 0); 
        } else {
            readpassword.setEchoChar('*'); 
        }
    }//GEN-LAST:event_passwordvisibleActionPerformed

    private void nextpagebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextpagebuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextpagebuttonActionPerformed

    private void departmentdropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentdropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentdropdownActionPerformed

    private void nextpagebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextpagebuttonMouseClicked
        // TODO add your handling code here:
        String userName = readusername.getText();
        boolean uEmpty = userName.isEmpty();
        String feedback1 = isValidUsername(userName);
        boolean validusername = false;
        if (!uEmpty){
            validusername = feedback1.equals("Valid");
        }
        
        String passWord = new String(readpassword.getPassword());
        boolean pEmpty = passWord.isEmpty();
        String feedback2 = isValidPassword(passWord);
        boolean validpassword = feedback2.equals("Valid");
        
        String retypePassWord = new String(readretypepassword.getPassword());
        boolean rEmpty = retypePassWord.isEmpty();
        String feedback3 = isValidRetypePassword(passWord, retypePassWord);
        boolean validretypepassword = feedback3.equals("Valid");
        
        if (uEmpty || pEmpty || rEmpty){
            JOptionPane.showMessageDialog(rootPane, "The Input Field can't be Empty");
        }
        
        if (validusername && validpassword && validretypepassword){
            firstpage.setVisible(false);
            secondpage.setVisible(true);
            invalidinputNote.setVisible(false);
        }else{
            firstpage.setVisible(true);
            secondpage.setVisible(false);
            invalidinputNote.setVisible(true);
            invalidinputNote.setText("<html>Invalid Input</html>");
        }
    }//GEN-LAST:event_nextpagebuttonMouseClicked

    private void readpasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readpasswordKeyReleased
        // TODO add your handling code here:
        
        String passWord = new String(readpassword.getPassword());
        String feedback = isValidPassword(passWord);
        
        if (!"Valid".equals(feedback)) {
            passwordNote.setText(feedback); 
            passwordNote.setVisible(true);  
        } else {
            passwordNote.setVisible(false);
        }
    }//GEN-LAST:event_readpasswordKeyReleased

    private void readusernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readusernameKeyReleased
        // TODO add your handling code here:
        String userName = readusername.getText();
        String feedback = isValidUsername(userName);
        
        if (!"Valid".equals(feedback)) {
            usernameNote.setText(feedback); 
            usernameNote.setVisible(true);  
        } else {
            usernameNote.setVisible(false);
        }
    }//GEN-LAST:event_readusernameKeyReleased

    private void readretypepasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readretypepasswordKeyReleased
        // TODO add your handling code here:
        String passWord = new String(readpassword.getPassword());
        String retypePassWord = new String(readretypepassword.getPassword());
        String feedback = isValidRetypePassword(passWord, retypePassWord);
        
        if (!"Valid".equals(feedback)) {
            retypepasswordNote.setText(feedback); 
            retypepasswordNote.setVisible(true); 
        } else {
            retypepasswordNote.setVisible(false);
        }
    }//GEN-LAST:event_readretypepasswordKeyReleased

    private void readICKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readICKeyReleased
        // TODO add your handling code here:
        String IC = readIC.getText();
        String feedback = isValidIC(IC);
        
        if (!"Valid".equals(feedback)) {
            icNote.setText(feedback); 
            icNote.setVisible(true); 
        } else {
            icNote.setVisible(false);
        } 
        
    }//GEN-LAST:event_readICKeyReleased

    private void readcontactnumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readcontactnumberKeyReleased
        // TODO add your handling code here:
        String contact = readcontactnumber.getText();
        String feedback = isValidContact(contact);
        
        if (!"Valid".equals(feedback)) {
            contactNote.setText(feedback); 
            contactNote.setVisible(true); 
        } else {
            contactNote.setVisible(false);
        } 
    }//GEN-LAST:event_readcontactnumberKeyReleased

    private void nextpagebutton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextpagebutton2ActionPerformed
        // TODO add your handling code here:
        String fullname = readfullname.getText();
        boolean fEmpty = fullname.isEmpty();
        boolean validfullname = false;
        
        String ic = readIC.getText();
        boolean iEmpty = ic.isEmpty();
        String feedback1 = "";
        boolean validic = false;
        
        
        String contact = readcontactnumber.getText();
        boolean cEmpty = contact.isEmpty();
        String feedback2 = "";
        boolean validcontact = false;
        
        if (!fEmpty){
            validfullname = true;
        }
        
        if (!iEmpty){
            feedback1 = isValidIC(ic);
        }
        
        if (!cEmpty){
            feedback2 = isValidContact(contact);
        }
        
        validic = feedback1.equals("Valid");
        validcontact = feedback2.equals("Valid");
        
        if (fEmpty || iEmpty || cEmpty){
            JOptionPane.showMessageDialog(rootPane, "The Input Field can't be Empty");
        }
        
        userData userdata = new userData();
        
        if (validfullname && validic && validcontact){
            userdata.setUsername(readusername.getText());
            userdata.setPassword(new String(readpassword.getPassword()));
            userdata.setFullName(fullname);
            userdata.setIC(ic);
            userdata.setDepartment((String)departmentdropdown.getSelectedItem());
            userdata.setContact(contact);
            
            String response = sendUserData(userdata);
            if (response.equals("Success")){
                JOptionPane.showMessageDialog(rootPane, "User registered successfully!");
                firstpage.setVisible(false);
                secondpage.setVisible(false);
                invalidinputNote2.setVisible(false);
            } else{
                JOptionPane.showMessageDialog(rootPane, "Error: " + response);
                firstpage.setVisible(true);
                secondpage.setVisible(false);
            }
        }else{
            firstpage.setVisible(false);
            secondpage.setVisible(true);
            invalidinputNote2.setVisible(true);
            invalidinputNote2.setText("<html>Invalid Input</html>");
        }
        
        
    }//GEN-LAST:event_nextpagebutton2ActionPerformed

    private void backbutton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbutton2ActionPerformed
        // TODO add your handling code here:
        firstpage.setVisible(true);
        secondpage.setVisible(false);
    }//GEN-LAST:event_backbutton2ActionPerformed

    private void backbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbutton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backbutton1ActionPerformed
    
    private static String isValidContact (String contactno){
        StringBuilder feedback = new StringBuilder("<html>Invalid Contact Number: <br>");
        
        if (!contactno.matches("\\d+")){
            feedback.append("* Contact number should be a 12-digit number");
        }else{
            return "Valid";
        }
        
        feedback.append("</html>");
        return feedback.toString();
    }
    
    private static String isValidIC (String ic){
        
        StringBuilder feedback = new StringBuilder("<html>Invalid IC: <br>");
        
        if (!ic.matches("\\d{12}")){
            feedback.append("* IC number should be a 12-digit number");
        }else{
            return "Valid";
        }
        
        feedback.append("</html>");
        return feedback.toString();
    }
    
    private static String isValidRetypePassword (String password, String retypepassword){
        
        boolean correct = retypepassword.equals(password);
        StringBuilder feedback = new StringBuilder("<html>Invalid Retype Password: <br>");
        
        if (!correct) {
            feedback.append("* Retype Password different with Password");
        }else{
            return "Valid";
        }
        
        feedback.append("</html>");
        return feedback.toString();
    }
    
    private static String sendUserData(userData userdata){
        try {
            registration_interface service = (registration_interface) Naming.lookup("rmi://192.168.100.33:5000/registration_interface");
            String response = service.registrationRequest(userdata);
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            return "Error: Unable to connect to the server.";
        }
    }
    
    private static String isValidUsername (String username){
        
        boolean hasSpecial = username.matches(".*[!@#$%^&*(),.?\":{}|<>].*");
        StringBuilder feedback = new StringBuilder("<html>Invalid Username: <br>");
        
        if (hasSpecial) {
            feedback.append("* User Name shouldn't contain a special symbol");
        }else {
            return "Valid";
        }

        feedback.append("</html>");
        return feedback.toString();
    }
    
    private static String isValidPassword(String password){
        boolean hasUpper = password.matches(".*[A-Z].*");
        boolean hasLower = password.matches(".*[a-z].*");
        boolean hasSpecial = password.matches(".*[!@#$%^&*(),.?\":{}|<>].*");
        boolean hasNumber = password.matches(".*[0-9].*");
        boolean hasSpace = password.matches(" ");
        
        StringBuilder feedback = new StringBuilder("<html>Invalid Password: <br>");
        if (!hasUpper) {
            feedback.append("* At least one uppercase letter<br>");
        }
        if (!hasLower) {
            feedback.append("* At least one lowercase letter<br>");
        }
        if (!hasSpecial) {
            feedback.append("* At least one special symbol<br>");
        }
        if (!hasNumber) {
            feedback.append("* At least one number<br>");
        }
        if (hasSpace) {
            feedback.append("* Password can't contain space<br>");
        }

        if (hasUpper && hasLower && hasSpecial && hasNumber) {
            
            return "Valid";
        }

        feedback.append("</html>");
        return feedback.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registrationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton1;
    private javax.swing.JButton backbutton2;
    private javax.swing.JLabel contactNote;
    private javax.swing.JLabel contactnoLabel;
    private javax.swing.JLabel departmentLabel;
    private javax.swing.JComboBox<String> departmentdropdown;
    private javax.swing.JLabel employeeregistrationLabelf;
    private javax.swing.JLabel employeeregistrationLabels;
    private javax.swing.JPanel firstpage;
    private javax.swing.JLabel fullnameLabel;
    private javax.swing.JLabel fullnameNote;
    private javax.swing.JLabel icLabel;
    private javax.swing.JLabel icNote;
    private javax.swing.JLabel invalidinputNote;
    private javax.swing.JLabel invalidinputNote2;
    private javax.swing.JButton nextpagebutton;
    private javax.swing.JButton nextpagebutton2;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordNote;
    private javax.swing.JCheckBox passwordvisible;
    private javax.swing.JTextField readIC;
    private javax.swing.JTextField readcontactnumber;
    private javax.swing.JTextField readfullname;
    private javax.swing.JPasswordField readpassword;
    private javax.swing.JPasswordField readretypepassword;
    private javax.swing.JTextField readusername;
    private javax.swing.JLabel retypepasswordLabel;
    private javax.swing.JLabel retypepasswordNote;
    private javax.swing.JCheckBox retypepasswordvisible;
    private javax.swing.JPanel secondpage;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel usernameNote;
    // End of variables declaration//GEN-END:variables
}
